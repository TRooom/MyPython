import rsa

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


def multiplicative_inverse(e, phi):
    d = 0
    x1 = 0
    x2 = 1
    y1 = 1
    temp_phi = phi

    while e > 0:
        temp1 = temp_phi / e
        temp2 = temp_phi - temp1 * e
        temp_phi = e
        e = temp2

        x = x2 - temp1 * x1
        y = d - temp1 * y1

        x2 = x1
        x1 = x
        d = y1
        y1 = y

    if temp_phi == 1:
        return d + phi


def inverse(a,b):
    if a ==0:
        return (0,1)
    x1,y1 = inverse(b%a,a)
    x = y1 - (b//a)*x1
    y = x1
    return  x,y


n1 =112525452660179696235982018159228566000123725219654116921381092754155747490289802061481887505365846937454896690604076651096696555873909301005930951800386428241675190565791434386997732554097832723131672310444709959891830156739029037957078319685859004196709137402440228905449573146472237001075141406083794926393
n2 =87282264709457511548879615184676176843043003856867866488274755663439966904637544871478920585994267073158934728954910231366971195580147367089977144983918965743017788516911538100469775763050493654898942572076351869283565632221210273280300966871215396597831025323456978834037240852170272778842403054368707267033
e =78078409585916972042386784533013985111341440946219174025831418904974306682701
n = 114603416258617277914112950886933842277017613048768896986887063295795075651032133331342538430388087616693581335924733790772692053706860660493046367184589390096319068611843480381499933909451620838321468620579057390519217231379164202675046840772638142625114303262708400933811096588213415014292281310788830121449
p =gcd(n1,n2)
q = n // p
fhi =(p-1)*(q-1)
d = inverse(fhi,e)[0]
key = rsa.PrivateKey(n,e,d,p,q)
sign = key.s
pass